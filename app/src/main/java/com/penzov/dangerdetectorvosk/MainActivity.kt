package com.penzov.dangerdetectorvosk

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.speech.tts.TextToSpeech
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import org.json.JSONObject
import org.vosk.Model
import org.vosk.Recognizer
import org.vosk.android.RecognitionListener
// SpeechService vs SpeechStreamService
// SpeechService ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º –Ω–∞–ø—Ä—è–º—É—é (AudioRecord), –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (—Ç–≤–æ—è —Ç–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è).
// SpeechStreamService ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ—Ç–æ–∫–æ–º –∞—É–¥–∏–æ (InputStream), –ø–æ–ª–µ–∑–µ–Ω –µ—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Ç–∞–µ—à—å –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å—Ç—Ä–∏–º–∏—à—å RTSP-–ø–æ—Ç–æ–∫.
import org.vosk.android.SpeechService
import java.io.File
import java.io.IOException
import java.util.*

class MainActivity : ComponentActivity(), RecognitionListener {

    private var speechService: SpeechService? = null
    private lateinit var resultTextView: TextView
    private lateinit var tts: TextToSpeech

    private val dangerWords = listOf(
        "–±–æ–º–±–∞", "—É–±–∏—Ç—å", "–Ω–æ–∂", "—Å—Ç—Ä–µ–ª—è—Ç—å", "–≤–∑–æ—Ä–≤–∞—Ç—å", "—Ç–µ—Ä—Ä–æ—Ä", "–≥—Ä–æ–º–∫–æ", "–∫—Ä–∏—á–∞—Ç—å", "–ø–æ–º–æ–≥–∏—Ç–µ", "–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TTS (Text-To-Speech) ‚Äî –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ñ—Ä–∞–∑
        tts = TextToSpeech(this) { status ->
            if (status == TextToSpeech.SUCCESS) {
                tts.language = Locale("ru")
            }
        }

        resultTextView = TextView(this).apply {
            text = "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞..."
            textSize = 20f
            setPadding(16, 32, 16, 32)
        }
        setContentView(resultTextView)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)
            != PackageManager.PERMISSION_GRANTED
        ) {
            requestPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO)
        } else {
            initModelAndStartRecognition()
        }
    }

    private val requestPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted ->
            if (isGranted) {
                initModelAndStartRecognition()
            } else {
                resultTextView.text = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É"
            }
        }

    private fun initModelAndStartRecognition() {
        try {
            // –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Vosk –∏–∑ assets –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            val modelDir = StorageService.unpackAssets(this, "model")
            val model = Model(modelDir.absolutePath)

            val recognizer = Recognizer(model, 16000.0f)
            speechService = SpeechService(recognizer, 16000.0f)
            speechService?.startListening(this)

            resultTextView.text = "üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ, —è —Å–ª—É—à–∞—é..."

        } catch (e: IOException) {
            Log.e("Vosk", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: ${e.message}")
            resultTextView.text = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: ${e.message}"
        }
    }

    override fun onPartialResult(hypothesis: String?) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    }

    override fun onResult(hypothesis: String?) {
        hypothesis?.let {
            val text = extractText(it)
            val dangerDetected = containsDanger(text)

            if (dangerDetected) {
                resultTextView.text = "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:\n$text"
                speak(text) // –æ–∑–≤—É—á–∫–∞
                TelegramNotifier.sendAlert(text) // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            } else {
                resultTextView.text = "‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n$text"
            }
        }
    }

    override fun onFinalResult(hypothesis: String?) {
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ onResult()
        onResult(hypothesis)
    }

    override fun onError(exception: Exception?) {
        resultTextView.text = "‚ùå –û—à–∏–±–∫–∞: ${exception?.message}"
        Log.e("Vosk", "–û—à–∏–±–∫–∞: ${exception?.message}")
    }

    override fun onTimeout() {
        resultTextView.text = "‚è∞ –¢–∞–π–º–∞—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    }

    override fun onDestroy() {
        super.onDestroy()
        speechService?.stop()
        tts.shutdown()
    }

    private fun extractText(json: String): String {
        return try {
            val obj = JSONObject(json)
            obj.optString("text", "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
        } catch (e: Exception) {
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç"
        }
    }

    private fun containsDanger(text: String): Boolean {
        val lowercase = text.lowercase()
        return dangerWords.any { word -> lowercase.contains(word) }
    }

    // üîä –û–∑–≤—É—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    private fun speak(text: String) {
        tts.speak(text, TextToSpeech.QUEUE_FLUSH, null, null)
    }
}


